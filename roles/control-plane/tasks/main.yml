---
- name: Check if Kubernetes is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_initialized

- name: Reset kubeadm if already initialized
  command: kubeadm reset -f
  when: k8s_initialized.stat.exists

- name: Remove previous CNI configuration
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/cni/net.d
    - /var/lib/etcd
  when: k8s_initialized.stat.exists

- name: Initialize kubeadm
  command: >-
    kubeadm init
    --pod-network-cidr={{ pod_cidr }}
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
    --control-plane-endpoint={{ control_plane_endpoint }}
    --cri-socket=unix:///run/containerd/containerd.sock
    --v=5
  register: kubeadm_init
  when: not k8s_initialized.stat.exists
  ignore_errors: yes

- name: Show kubeadm initialization result
  debug:
    var: kubeadm_init
  when: kubeadm_init is defined

- name: Check containerd status
  systemd:
    name: containerd
  register: containerd_status

- name: Show containerd status
  debug:
    msg: "Containerd is {{ containerd_status.status.ActiveState }}"
  
- name: Debug - Check if port 6443 is in use
  shell: netstat -tlnp | grep :6443 || echo "Port 6443 not in use"
  register: port_check
  when: kubeadm_init is failed

- name: Debug - Show port check result
  debug:
    var: port_check.stdout
  when: kubeadm_init is failed

- name: Retry kubeadm init without control-plane-endpoint if first attempt failed
  command: >-
    kubeadm init
    --pod-network-cidr={{ pod_cidr }}
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
    --cri-socket=unix:///run/containerd/containerd.sock
    --v=5
  register: kubeadm_init_retry
  when: kubeadm_init is failed
  ignore_errors: yes

- name: Wait for API server to be ready
  uri:
    url: "https://{{ ansible_default_ipv4.address }}:6443/healthz"
    method: GET
    validate_certs: no
    timeout: 10
  register: api_health
  until: api_health.status == 200
  retries: 30
  delay: 10
  when: (kubeadm_init is succeeded) or (kubeadm_init_retry is defined and kubeadm_init_retry is succeeded)

- name: Check if admin.conf exists after initialization
  stat:
    path: /etc/kubernetes/admin.conf
  register: admin_conf_check

- name: Create .kube config
  file:
    path: /home/{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: admin_conf_check.stat.exists

- name: Copy admin.conf
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_user }}/.kube/config
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    remote_src: yes
  when: admin_conf_check.stat.exists

- name: Generate join command using kubeadm token
  shell: kubeadm token create --print-join-command
  register: join_command_output
  when: admin_conf_check.stat.exists

- name: Store join command
  copy:
    content: "{{ join_command_output.stdout }}"
    dest: /tmp/join-command.sh
    mode: 0755
  when: join_command_output is succeeded and join_command_output.stdout is defined

- name: Show join command for verification
  debug:
    msg: "Join command: {{ join_command_output.stdout }}"
  when: join_command_output is succeeded
